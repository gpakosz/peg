# PE Grammar for PE Grammars
#
# Adapted from [1] by Ian Piumarta <first-name at last-name point com>.
#
# Local modifications (marked '#ikp') to support:
#     C text in '{ ... }' copied verbatim to output as 'semantic action'
#     input consumed between '<' and '>' is 'char yytext[]' in semantic actions
#
# Best viewed using 140 columns monospaced with tabs every 8.
#
# [1] Bryan Ford.  "Parsing Expression Grammars: A Recognition-Based Syntactic
#     Foundation."  Symposium on Principles of Programming Languages,
#     January 14--16, 2004, Venice, Italy.
#
# Last edited: 2016-07-15 10:27:27 by piumarta on zora

# Hierarchical syntax

Grammar		<- Spacing (Declaration / Definition)+ Trailer? EndOfFile

Declaration     <- '%{'				{ headerLine= lineNumber; }
		< ( !'%}' (EndOfLine / .) )* >
		RPERCENT			{ headers = makeHeader(headers, headerLine, yytext); }		#{YYACCEPT}

Trailer         <- '%%'				{ headerLine= lineNumber }
		< .* >				{ trailer = makeTrailer(headerLine, yytext); }			#{YYACCEPT}

Definition	<-				{ headerLine= lineNumber }
                    Identifier 			{ if (push(beginRule(findRule(yytext), headerLine))->rule.expression)
                                                    fprintf(stderr, "rule '%s' redefined\n", yytext); }
		     LEFTARROW Expression	{ Node *e= pop();  Rule_setExpression(pop(), e); }              #{YYACCEPT}
Expression	<- Sequence (SLASH Sequence	{ Node *f= pop();  push(Alternate_append(pop(), f)); }
			    )*
Sequence	<- error (error		{ Node *f= pop();  push(Sequence_append(pop(), f)); }	#ikp expanded from 'Seq <- Prefix*'
			  )*

error <-	Prefix  (TILDE Action			{ push(makeError(pop(), yytext)); }
			)?

                # An attempt to move NOT Suffix as first option result in failure
Prefix		<- AT  Action			{ push(makeInline(yytext)); }
		 / AND Action			{ push(makePredicate(yytext)); }	#ikp added
		 / AND Suffix			{ push(makePeekFor(pop())); }		#ikp expanded from 'Prefix <- (AND/NOT)? Suffix'
		 / NOT Suffix			{ push(makePeekNot(pop())); }
		 /     Suffix
Suffix		<- Primary (QUESTION		{ push(makeQuery(pop())); }
			     / STAR		{ push(makeStar (pop())); }
			     / PLUS		{ push(makePlus (pop())); }
			   )?
Primary		<- Identifier (
                        COLON			{ push(makeVariable(yytext)); }
			 Identifier !LEFTARROW	{ Node *name= makeName(findRule(yytext));  name->name.variable= pop();  push(name); }
                        / !LEFTARROW            { push(makeName(findRule(yytext))); }
                        )
		 / OPEN Expression CLOSE ~{yyerror("missing expected `)`");}
		 / (
                        LiteralSQ		{ push(makeString(yytext, '\'')); }
                        / LiteralDQ		{ push(makeString(yytext, '"')); }
                    ) ('i' !IdentStart  { setTopStrCharCaseInsensitive(); })? Spacing
		 / Class			{ push(makeClass(yytext)); }
                     ('i' !IdentStart  { setTopClassCharCaseInsensitive(); })? Spacing
		 / DOT				{ push(makeDot()); }
		 / Action			{ push(makeAction(actionLine, yytext)); }	#ikp added
		 / BEGIN			{ push(makePredicate("YY_BEGIN")); }	#ikp added
		 / END				{ push(makePredicate("YY_END")); }	#ikp added

# Lexical syntax

Identifier	<- < IdentStart IdentCont* > Spacing		#ikp inserted < ... >
IdentStart	<- [a-zA-Z_]
IdentCont	<- IdentStart / [0-9]
LiteralSQ	<- ['] < (!['] Char )* > [']		#ikp inserted < ... >
LiteralDQ	<- ["] < (!["] Char )* > ["]		#ikp inserted < ... >
Class		<- '[' < (!']' Range)* > ']'		#ikp inserted < ... >
Range		<- Char '-' ! ']' Char / Char
Char		<- '\\' (
                    [-abefnrtv'"\[\]\\]			#ikp added missing ANSI escapes: abefv
                    / 'x'[0-9A-Fa-f][0-9A-Fa-f]?
                    / [0-3][0-7][0-7]
                    / [0-7][0-7]?
                    )
		 / !'\\' .
LEFTARROW	<- '<-' Spacing
SLASH		<- '/' Spacing
AND		<- '&' Spacing
NOT		<- '!' Spacing
QUESTION	<- '?' Spacing
STAR		<- '*' Spacing
PLUS		<- '+' Spacing
OPEN		<- '(' Spacing
CLOSE		<- ')' Spacing
DOT		<- '.' Spacing
TILDE		<- '~' Spacing
COLON		<- ':' Spacing
AT		<- '@' Spacing
Spacing		<- (Space+ / Comment)*
Comment		<- '#' (!EndOfLine .)* EndOfLine
Space		<- ' ' / '\t' / EndOfLine
EndOfLine	<- ( '\n' '\r'? / '\r' '\n'? )         { ++lineNumber; lineNumberPos=inputPos; }
EndOfFile	<- !.

Action		<- '{'                              { actionLine= lineNumber; }
                    < Braces* > '}' Spacing		#ikp added
Braces      <-	'{' Braces* '}'
	/ LiteralBraces
	/ !'}' (EndOfLine / . )
LiteralBraces	<- ['] (!([']/EndOfLine) Char )* [']
		 / ["] (!(["]/EndOfLine) Char )* ["]

BEGIN		<- '<' Spacing				#ikp added
END		<- '>' Spacing				#ikp added
RPERCENT        <- '%}' Spacing
