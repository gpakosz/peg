/* A recursive-descent parser generated by peg 0.1.18 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#define YYRULECOUNT 42
#ifndef YY_MALLOC
#define YY_MALLOC(C, N)		malloc(N)
#endif
#ifndef YY_REALLOC
#define YY_REALLOC(C, P, N)	realloc(P, N)
#endif
#ifndef YY_FREE
#define YY_FREE(C, P)		free(P)
#endif
#ifndef YY_LOCAL
#define YY_LOCAL(T)	static T
#endif
#ifndef YY_ACTION
#define YY_ACTION(T)	static T
#endif
#ifndef YY_RULE
#define YY_RULE(T)	static T
#endif
#ifndef YY_PARSE
#define YY_PARSE(T)	T
#endif
#ifndef YYPARSE
#define YYPARSE		yyparse
#endif
#ifndef YYPARSEFROM
#define YYPARSEFROM	yyparsefrom
#endif
#ifndef YYRELEASE
#define YYRELEASE	yyrelease
#endif
#ifndef YY_BEGIN
#define YY_BEGIN	( yy->__begin= yy->__pos, 1)
#endif
#ifndef YY_END
#define YY_END		( yy->__end= yy->__pos, 1)
#endif
#ifdef YY_DEBUG
# define yyprintf(args)	fprintf args
#else
# define yyprintf(args)
#endif
#ifndef YYSTYPE
#define YYSTYPE	int
#endif
#ifndef YY_STACK_SIZE
#define YY_STACK_SIZE 128
#endif

#ifndef YY_BUFFER_SIZE
#define YY_BUFFER_SIZE 1024
#endif

#ifndef YY_PART

typedef struct _yycontext yycontext;
typedef void (*yyaction)(yycontext *yy, char *yytext, int yyleng);
typedef struct _yythunk { int begin, end;  yyaction  action;  struct _yythunk *next; } yythunk;

struct _yycontext {
  char     *__buf;
  int       __buflen;
  int       __pos;
  int       __limit;
  char     *__text;
  int       __textlen;
  int       __begin;
  int       __end;
  int       __textmax;
  yythunk  *__thunks;
  int       __thunkslen;
  int       __thunkpos;
  YYSTYPE   __;
  YYSTYPE  *__val;
  YYSTYPE  *__vals;
  int       __valslen;
  int       __inputpos;
  int       __lineno;
  int       __linenopos;
#ifdef YY_DEBUG
  char      __escapeCharBuf[4];
#endif
#ifdef YY_CTX_MEMBERS
  YY_CTX_MEMBERS
#endif
#ifdef YY_RULES_PROFILE
  int       __rules_succeed_count[YYRULECOUNT+1];
  int       __rules_fail_count[YYRULECOUNT+1];
#endif
};

#ifdef YY_DEBUG
YY_LOCAL(const char *) yyescapedChar(yycontext *yy, int ch)
{
    const char *strCh = NULL;
    switch(ch)
    {
        case '\a':  strCh= "\\a"; break;	/* bel */
        case '\b':  strCh= "\\b"; break;	/* bs */
        case '\e':  strCh= "\\e"; break;	/* esc */
        case '\f':  strCh= "\\f"; break;	/* ff */
        case '\n':  strCh= "\\n"; break;	/* nl */
        case '\r':  strCh= "\\r"; break;   /* cr */
        case '\t':  strCh= "\\t"; break;   /* ht */
        case '\v':  strCh= "\\v"; break;	/* vt */
        //case '\'':  strCh= "\\'"; break;	/* sq */
        default:  snprintf(yy->__escapeCharBuf, sizeof(yy->__escapeCharBuf), "%c", ch);
    }
    if(strCh) snprintf(yy->__escapeCharBuf, sizeof(yy->__escapeCharBuf), "%s", strCh);
    return yy->__escapeCharBuf;
}
#endif

#ifdef YY_CTX_LOCAL
#define YY_CTX_PARAM_	yycontext *yyctx,
#define YY_CTX_PARAM	yycontext *yyctx
#define YY_CTX_ARG_	yyctx,
#define YY_CTX_ARG	yyctx
#ifndef YY_ENDLINE_CHAR
#define YY_ENDLINE_CHAR	'\n'
#endif
#ifndef YY_INPUT
#define YY_INPUT(yy, buf, result, max_size)		\
  {							\
    int yyc= getchar();					\
    result= (EOF != yyc);                       	\
    if(result) {                                	\
      *(buf)= yyc;                              	\
      if (YY_ENDLINE_CHAR == yyc)       		\
        {++yy->__lineno;yy->__linenopos=yy->__inputpos;}\
      ++yy->__inputpos;	                		\
    }                                           	\
    yyprintf((stderr, "<%s>", yyescapedChar(yy, yyc)));\
  }
#endif
#else
#define YY_CTX_PARAM_
#define YY_CTX_PARAM
#define YY_CTX_ARG_
#define YY_CTX_ARG
yycontext _yyctx= { 0, 0 };
yycontext *yyctx= &_yyctx;
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)			\
  {							\
    int yyc= getchar();					\
    result= (EOF != yyc);                       	\
    if(result) {                                	\
      *(buf)= yyc;                              	\
      if (YY_ENDLINE_CHAR == yyc)       		\
        {++yyctx->__lineno;yyctx->__linenopos=yyctx->__inputpos;}\
      ++yyctx->__inputpos;	                		\
    }                                           	\
    yyprintf((stderr, "<%s>", yyescapedChar(yyctx, yyc)));\
  }
#endif
#endif

YY_LOCAL(int) yyrefill(yycontext *yy)
{
  int yyn;
  while (yy->__buflen - yy->__pos < 512)
    {
#ifdef YY_DEBUG
      int new_buflen = yy->__buflen * 2;
      yy->__buf= (char *)YY_REALLOC(yy, yy->__buf, new_buflen);
      memset(yy->__buf+yy->__buflen, 0, yy->__buflen);
      yy->__buflen = new_buflen;
#else
      yy->__buflen *= 2;
      yy->__buf= (char *)YY_REALLOC(yy, yy->__buf, yy->__buflen);
#endif
    }
#ifdef YY_CTX_LOCAL
  YY_INPUT(yy, (yy->__buf + yy->__pos), yyn, (yy->__buflen - yy->__pos));
#else
  YY_INPUT((yy->__buf + yy->__pos), yyn, (yy->__buflen - yy->__pos));
#endif
  if (!yyn) return 0;
  yy->__limit += yyn;
  return 1;
}

YY_LOCAL(int) yymatchDot(yycontext *yy)
{
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  ++yy->__pos;
  return 1;
}

YY_LOCAL(int) yymatchChar(yycontext *yy, int c)
{
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  if ((unsigned char)yy->__buf[yy->__pos] == c)
    {
      ++yy->__pos;
      yyprintf((stderr, "  ok   yymatchChar(yy, %s) @%d:%d %s\n", yyescapedChar(yy, c), yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchChar(yy, %s) @%d:%d %s\n", yyescapedChar(yy, c), yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}

YY_LOCAL(int) yymatchCharCaseInsensitive(yycontext *yy, int c)
{
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  if (tolower(yy->__buf[yy->__pos]) == tolower(c))
    {
      ++yy->__pos;
      yyprintf((stderr, "  ok   yymatchCharCaseInsensitive(yy, %s) @%d:%d %s\n", yyescapedChar(yy, c), yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchCharCaseInsensitive(yy, %s) @%d:%d %s\n", yyescapedChar(yy, c), yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}

YY_LOCAL(int) yymatchString(yycontext *yy, const char *s)
{
  int yysav= yy->__pos;
  while (*s)
    {
      if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
      if (yy->__buf[yy->__pos] != *s)
        {
          yy->__pos= yysav;
          return 0;
        }
      ++s;
      ++yy->__pos;
    }
  return 1;
}

YY_LOCAL(int) yymatchStringCaseInsensitive(yycontext *yy, const char *s)
{
  int yysav= yy->__pos;
  while (*s)
    {
      if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
      if (tolower(yy->__buf[yy->__pos]) != tolower(*s))
        {
          yy->__pos= yysav;
          return 0;
        }
      ++s;
      ++yy->__pos;
    }
  return 1;
}

YY_LOCAL(int) yymatchClass(yycontext *yy, unsigned char *bits)
{
  int c;
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  c= (unsigned char)yy->__buf[yy->__pos];
  if (bits[c >> 3] & (1 << (c & 7)))
    {
      ++yy->__pos;
      yyprintf((stderr, "  ok   yymatchClass @%d:%d %s\n", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchClass @%d:%d %s\n", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}

YY_LOCAL(int) yymatchClassCaseInsensitive(yycontext *yy, unsigned char *bits)
{
  int c;
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  c= tolower((unsigned char)yy->__buf[yy->__pos]);
  if (bits[c >> 3] & (1 << (c & 7)))
    {
      ++yy->__pos;
      yyprintf((stderr, "  ok   yymatchClassCaseInsensitive @%d:%d %s\n", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchClassCaseInsensitive @%d:%d %s\n", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}

YY_LOCAL(void) yyDo(yycontext *yy, yyaction action, int begin, int end)
{
  while (yy->__thunkpos >= yy->__thunkslen)
    {
      yy->__thunkslen *= 2;
      yy->__thunks= (yythunk *)YY_REALLOC(yy, yy->__thunks, sizeof(yythunk) * yy->__thunkslen);
    }
  yy->__thunks[yy->__thunkpos].begin=  begin;
  yy->__thunks[yy->__thunkpos].end=    end;
  yy->__thunks[yy->__thunkpos].action= action;
  ++yy->__thunkpos;
}

YY_LOCAL(int) yyText(yycontext *yy, int begin, int end)
{
  int yyleng= end - begin;
  if (yyleng <= 0)
    yyleng= 0;
  else
    {
      while (yy->__textlen < (yyleng + 1))
	{
	  yy->__textlen *= 2;
	  yy->__text= (char *)YY_REALLOC(yy, yy->__text, yy->__textlen);
	}
      memcpy(yy->__text, yy->__buf + begin, yyleng);
    }
  yy->__text[yyleng]= '\0';
  return yyleng;
}

YY_LOCAL(void) yyDone(yycontext *yy)
{
  int pos;
  for (pos= 0;  pos < yy->__thunkpos;  ++pos)
    {
      yythunk *thunk= &yy->__thunks[pos];
      int yyleng= thunk->end ? yyText(yy, thunk->begin, thunk->end) : thunk->begin;
      yyprintf((stderr, "DO [%d] %p %s\n", pos, thunk->action, yy->__text));
      thunk->action(yy, yy->__text, yyleng);
    }
  yy->__thunkpos= 0;
}

YY_LOCAL(void) yyCommit(yycontext *yy)
{
  if ((yy->__limit -= yy->__pos))
    {
      memmove(yy->__buf, yy->__buf + yy->__pos, yy->__limit);
    }
  yy->__begin -= yy->__pos;
  yy->__end -= yy->__pos;
  yy->__pos= yy->__thunkpos= 0;
}

YY_LOCAL(int) yyAccept(yycontext *yy, int tp0)
{
  if (tp0)
    {
      fprintf(stderr, "accept denied at %d\n", tp0);
      return 0;
    }
  else
    {
      yyDone(yy);
      yyCommit(yy);
    }
  return 1;
}

YY_LOCAL(void) yyPush(yycontext *yy, char *text, int count)
{
  yy->__val += count;
  while (yy->__valslen <= yy->__val - yy->__vals)
    {
      long offset= yy->__val - yy->__vals;
      yy->__valslen *= 2;
      yy->__vals= (YYSTYPE *)YY_REALLOC(yy, yy->__vals, sizeof(YYSTYPE) * yy->__valslen);
      yy->__val= yy->__vals + offset;
    }
}
YY_LOCAL(void) yyPop(yycontext *yy, char *text, int count)   { yy->__val -= count; }
YY_LOCAL(void) yySet(yycontext *yy, char *text, int count)   { yy->__val[count]= yy->__; }

#endif /* YY_PART */

#define	YYACCEPT	yyAccept(yy, yythunkpos0)

YY_RULE(int) yy_LiteralBraces(yycontext *yy); /* 42 */
YY_RULE(int) yy_Braces(yycontext *yy); /* 41 */
YY_RULE(int) yy_Comment(yycontext *yy); /* 40 */
YY_RULE(int) yy_Space(yycontext *yy); /* 39 */
YY_RULE(int) yy_Range(yycontext *yy); /* 38 */
YY_RULE(int) yy_Char(yycontext *yy); /* 37 */
YY_RULE(int) yy_IdentCont(yycontext *yy); /* 36 */
YY_RULE(int) yy_END(yycontext *yy); /* 35 */
YY_RULE(int) yy_BEGIN(yycontext *yy); /* 34 */
YY_RULE(int) yy_DOT(yycontext *yy); /* 33 */
YY_RULE(int) yy_Class(yycontext *yy); /* 32 */
YY_RULE(int) yy_IdentStart(yycontext *yy); /* 31 */
YY_RULE(int) yy_LiteralDQ(yycontext *yy); /* 30 */
YY_RULE(int) yy_LiteralSQ(yycontext *yy); /* 29 */
YY_RULE(int) yy_CLOSE(yycontext *yy); /* 28 */
YY_RULE(int) yy_OPEN(yycontext *yy); /* 27 */
YY_RULE(int) yy_COLON(yycontext *yy); /* 26 */
YY_RULE(int) yy_PLUS(yycontext *yy); /* 25 */
YY_RULE(int) yy_STAR(yycontext *yy); /* 24 */
YY_RULE(int) yy_QUESTION(yycontext *yy); /* 23 */
YY_RULE(int) yy_Primary(yycontext *yy); /* 22 */
YY_RULE(int) yy_NOT(yycontext *yy); /* 21 */
YY_RULE(int) yy_Suffix(yycontext *yy); /* 20 */
YY_RULE(int) yy_AND(yycontext *yy); /* 19 */
YY_RULE(int) yy_AT(yycontext *yy); /* 18 */
YY_RULE(int) yy_Action(yycontext *yy); /* 17 */
YY_RULE(int) yy_TILDE(yycontext *yy); /* 16 */
YY_RULE(int) yy_Prefix(yycontext *yy); /* 15 */
YY_RULE(int) yy_error(yycontext *yy); /* 14 */
YY_RULE(int) yy_SLASH(yycontext *yy); /* 13 */
YY_RULE(int) yy_Sequence(yycontext *yy); /* 12 */
YY_RULE(int) yy_Expression(yycontext *yy); /* 11 */
YY_RULE(int) yy_LEFTARROW(yycontext *yy); /* 10 */
YY_RULE(int) yy_Identifier(yycontext *yy); /* 9 */
YY_RULE(int) yy_RPERCENT(yycontext *yy); /* 8 */
YY_RULE(int) yy_EndOfLine(yycontext *yy); /* 7 */
YY_RULE(int) yy_EndOfFile(yycontext *yy); /* 6 */
YY_RULE(int) yy_Trailer(yycontext *yy); /* 5 */
YY_RULE(int) yy_Definition(yycontext *yy); /* 4 */
YY_RULE(int) yy_Declaration(yycontext *yy); /* 3 */
YY_RULE(int) yy_Spacing(yycontext *yy); /* 2 */
YY_RULE(int) yy_Grammar(yycontext *yy); /* 1 */

#ifdef YY_RULES_PROFILE
static const char *yyrulenames[YYRULECOUNT+1] = {
NULL,
"Grammar", /* 1 */
"Spacing", /* 2 */
"Declaration", /* 3 */
"Definition", /* 4 */
"Trailer", /* 5 */
"EndOfFile", /* 6 */
"EndOfLine", /* 7 */
"RPERCENT", /* 8 */
"Identifier", /* 9 */
"LEFTARROW", /* 10 */
"Expression", /* 11 */
"Sequence", /* 12 */
"SLASH", /* 13 */
"error", /* 14 */
"Prefix", /* 15 */
"TILDE", /* 16 */
"Action", /* 17 */
"AT", /* 18 */
"AND", /* 19 */
"Suffix", /* 20 */
"NOT", /* 21 */
"Primary", /* 22 */
"QUESTION", /* 23 */
"STAR", /* 24 */
"PLUS", /* 25 */
"COLON", /* 26 */
"OPEN", /* 27 */
"CLOSE", /* 28 */
"LiteralSQ", /* 29 */
"LiteralDQ", /* 30 */
"IdentStart", /* 31 */
"Class", /* 32 */
"DOT", /* 33 */
"BEGIN", /* 34 */
"END", /* 35 */
"IdentCont", /* 36 */
"Char", /* 37 */
"Range", /* 38 */
"Space", /* 39 */
"Comment", /* 40 */
"Braces", /* 41 */
"LiteralBraces", /* 42 */

};
#endif
YY_ACTION(void) yy_1_Action(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Action\n"));
  {
#line 96
   actionLine= lineNumber; ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_EndOfLine(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_EndOfLine\n"));
  {
#line 93
   ++lineNumber; ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_12_Primary(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_12_Primary\n"));
  {
#line 60
   push(makePredicate("YY_END")); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_11_Primary(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_11_Primary\n"));
  {
#line 59
   push(makePredicate("YY_BEGIN")); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_10_Primary(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_10_Primary\n"));
  {
#line 58
   push(makeAction(actionLine, yytext)); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_9_Primary(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_9_Primary\n"));
  {
#line 57
   push(makeDot()); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_8_Primary(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_8_Primary\n"));
  {
#line 56
   setTopClassCharCaseInsensitive(); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_7_Primary(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_7_Primary\n"));
  {
#line 55
   push(makeClass(yytext)); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_6_Primary(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_6_Primary\n"));
  {
#line 54
   setTopStrCharCaseInsensitive(); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_5_Primary(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_5_Primary\n"));
  {
#line 53
   push(makeString(yytext, '"')); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_4_Primary(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_4_Primary\n"));
  {
#line 52
   push(makeString(yytext, '\'')); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_3_Primary(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_Primary\n"));
  {
#line 49
   push(makeName(findRule(yytext))); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_Primary(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Primary\n"));
  {
#line 48
   Node *name= makeName(findRule(yytext));  name->name.variable= pop();  push(name); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_Primary(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Primary\n"));
  {
#line 47
   push(makeVariable(yytext)); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_3_Suffix(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_Suffix\n"));
  {
#line 45
   push(makePlus (pop())); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_Suffix(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Suffix\n"));
  {
#line 44
   push(makeStar (pop())); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_Suffix(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Suffix\n"));
  {
#line 43
   push(makeQuery(pop())); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_4_Prefix(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_4_Prefix\n"));
  {
#line 41
   push(makePeekNot(pop())); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_3_Prefix(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_Prefix\n"));
  {
#line 40
   push(makePeekFor(pop())); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_Prefix(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Prefix\n"));
  {
#line 39
   push(makePredicate(yytext)); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_Prefix(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Prefix\n"));
  {
#line 38
   push(makeInline(yytext)); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_error(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_error\n"));
  {
#line 35
   push(makeError(pop(), yytext)); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_Sequence(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Sequence\n"));
  {
#line 32
   Node *f= pop();  push(Sequence_append(pop(), f)); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_Expression(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Expression\n"));
  {
#line 30
   Node *f= pop();  push(Alternate_append(pop(), f)); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_Definition(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Definition\n"));
  {
#line 29
   Node *e= pop();  Rule_setExpression(pop(), e); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_Definition(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Definition\n"));
  {
#line 28
   if (push(beginRule(findRule(yytext)))->rule.expression) fprintf(stderr, "rule '%s' redefined\n", yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_Trailer(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Trailer\n"));
  {
#line 26
   trailer = makeTrailer(headerLine, yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_Trailer(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Trailer\n"));
  {
#line 25
   headerLine= lineNumber ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_Declaration(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Declaration\n"));
  {
#line 23
   headers = makeHeader(headers, headerLine, yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_Declaration(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Declaration\n"));
  {
#line 21
   headerLine= lineNumber; ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}

YY_RULE(int) yy_LiteralBraces(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "LiteralBraces"));
  {  int yypos2= yy->__pos, yythunkpos2= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l3;
  l4:;	
  {  int yypos5= yy->__pos, yythunkpos5= yy->__thunkpos;
  {  int yypos6= yy->__pos, yythunkpos6= yy->__thunkpos;
  {  int yypos7= yy->__pos, yythunkpos7= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l8;  goto l7;
  l8:;	  yy->__pos= yypos7; yy->__thunkpos= yythunkpos7;  if (!yy_EndOfLine(yy)) goto l6;
  }
  l7:;	  goto l5;
  l6:;	  yy->__pos= yypos6; yy->__thunkpos= yythunkpos6;
  }  if (!yy_Char(yy)) goto l5;  goto l4;
  l5:;	  yy->__pos= yypos5; yy->__thunkpos= yythunkpos5;
  }  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l3;  goto l2;
  l3:;	  yy->__pos= yypos2; yy->__thunkpos= yythunkpos2;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l1;
  l9:;	
  {  int yypos10= yy->__pos, yythunkpos10= yy->__thunkpos;
  {  int yypos11= yy->__pos, yythunkpos11= yy->__thunkpos;
  {  int yypos12= yy->__pos, yythunkpos12= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l13;  goto l12;
  l13:;	  yy->__pos= yypos12; yy->__thunkpos= yythunkpos12;  if (!yy_EndOfLine(yy)) goto l11;
  }
  l12:;	  goto l10;
  l11:;	  yy->__pos= yypos11; yy->__thunkpos= yythunkpos11;
  }  if (!yy_Char(yy)) goto l10;  goto l9;
  l10:;	  yy->__pos= yypos10; yy->__thunkpos= yythunkpos10;
  }  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l1;
  }
  l2:;	
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[42];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "LiteralBraces", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l1:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[42];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "LiteralBraces", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Braces(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Braces"));
  {  int yypos15= yy->__pos, yythunkpos15= yy->__thunkpos;  if (!yymatchChar(yy, '{')) goto l16;
  l17:;	
  {  int yypos18= yy->__pos, yythunkpos18= yy->__thunkpos;  if (!yy_Braces(yy)) goto l18;  goto l17;
  l18:;	  yy->__pos= yypos18; yy->__thunkpos= yythunkpos18;
  }  if (!yymatchChar(yy, '}')) goto l16;  goto l15;
  l16:;	  yy->__pos= yypos15; yy->__thunkpos= yythunkpos15;  if (!yy_LiteralBraces(yy)) goto l19;  goto l15;
  l19:;	  yy->__pos= yypos15; yy->__thunkpos= yythunkpos15;
  {  int yypos20= yy->__pos, yythunkpos20= yy->__thunkpos;  if (!yymatchChar(yy, '}')) goto l20;  goto l14;
  l20:;	  yy->__pos= yypos20; yy->__thunkpos= yythunkpos20;
  }
  {  int yypos21= yy->__pos, yythunkpos21= yy->__thunkpos;  if (!yy_EndOfLine(yy)) goto l22;  goto l21;
  l22:;	  yy->__pos= yypos21; yy->__thunkpos= yythunkpos21;  if (!yymatchDot(yy)) goto l14;
  }
  l21:;	
  }
  l15:;	
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[41];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "Braces", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l14:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[41];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "Braces", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Comment(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Comment"));  if (!yymatchChar(yy, '#')) goto l23;
  l24:;	
  {  int yypos25= yy->__pos, yythunkpos25= yy->__thunkpos;
  {  int yypos26= yy->__pos, yythunkpos26= yy->__thunkpos;  if (!yy_EndOfLine(yy)) goto l26;  goto l25;
  l26:;	  yy->__pos= yypos26; yy->__thunkpos= yythunkpos26;
  }  if (!yymatchDot(yy)) goto l25;  goto l24;
  l25:;	  yy->__pos= yypos25; yy->__thunkpos= yythunkpos25;
  }  if (!yy_EndOfLine(yy)) goto l23;
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[40];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "Comment", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l23:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[40];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "Comment", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Space(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Space"));
  {  int yypos28= yy->__pos, yythunkpos28= yy->__thunkpos;  if (!yymatchChar(yy, ' ')) goto l29;  goto l28;
  l29:;	  yy->__pos= yypos28; yy->__thunkpos= yythunkpos28;  if (!yymatchChar(yy, '\t')) goto l30;  goto l28;
  l30:;	  yy->__pos= yypos28; yy->__thunkpos= yythunkpos28;  if (!yy_EndOfLine(yy)) goto l27;
  }
  l28:;	
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[39];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "Space", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l27:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[39];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "Space", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Range(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Range"));
  {  int yypos32= yy->__pos, yythunkpos32= yy->__thunkpos;  if (!yy_Char(yy)) goto l33;  if (!yymatchChar(yy, '-')) goto l33;
  {  int yypos34= yy->__pos, yythunkpos34= yy->__thunkpos;  if (!yymatchChar(yy, ']')) goto l34;  goto l33;
  l34:;	  yy->__pos= yypos34; yy->__thunkpos= yythunkpos34;
  }  if (!yy_Char(yy)) goto l33;  goto l32;
  l33:;	  yy->__pos= yypos32; yy->__thunkpos= yythunkpos32;  if (!yy_Char(yy)) goto l31;
  }
  l32:;	
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[38];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "Range", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l31:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[38];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "Range", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Char(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Char"));
  {  int yypos36= yy->__pos, yythunkpos36= yy->__thunkpos;  if (!yymatchChar(yy, '\\')) goto l37;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\204\000\000\000\000\000\000\070\146\100\124\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l37;  goto l36;
  l37:;	  yy->__pos= yypos36; yy->__thunkpos= yythunkpos36;  if (!yymatchChar(yy, '\\')) goto l38;  if (!yymatchChar(yy, 'x')) goto l38;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\176\000\000\000\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l38;
  {  int yypos39= yy->__pos, yythunkpos39= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\176\000\000\000\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l39;  goto l40;
  l39:;	  yy->__pos= yypos39; yy->__thunkpos= yythunkpos39;
  }
  l40:;	  goto l36;
  l38:;	  yy->__pos= yypos36; yy->__thunkpos= yythunkpos36;  if (!yymatchChar(yy, '\\')) goto l41;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l41;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l41;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l41;  goto l36;
  l41:;	  yy->__pos= yypos36; yy->__thunkpos= yythunkpos36;  if (!yymatchChar(yy, '\\')) goto l42;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l42;
  {  int yypos43= yy->__pos, yythunkpos43= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l43;  goto l44;
  l43:;	  yy->__pos= yypos43; yy->__thunkpos= yythunkpos43;
  }
  l44:;	  goto l36;
  l42:;	  yy->__pos= yypos36; yy->__thunkpos= yythunkpos36;  if (!yymatchChar(yy, '\\')) goto l45;  if (!yymatchChar(yy, '-')) goto l45;  goto l36;
  l45:;	  yy->__pos= yypos36; yy->__thunkpos= yythunkpos36;
  {  int yypos46= yy->__pos, yythunkpos46= yy->__thunkpos;  if (!yymatchChar(yy, '\\')) goto l46;  goto l35;
  l46:;	  yy->__pos= yypos46; yy->__thunkpos= yythunkpos46;
  }  if (!yymatchDot(yy)) goto l35;
  }
  l36:;	
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[37];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "Char", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l35:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[37];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "Char", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_IdentCont(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "IdentCont"));
  {  int yypos48= yy->__pos, yythunkpos48= yy->__thunkpos;  if (!yy_IdentStart(yy)) goto l49;  goto l48;
  l49:;	  yy->__pos= yypos48; yy->__thunkpos= yythunkpos48;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l47;
  }
  l48:;	
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[36];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "IdentCont", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l47:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[36];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "IdentCont", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_END(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "END"));  if (!yymatchChar(yy, '>')) goto l50;  if (!yy_Spacing(yy)) goto l50;
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[35];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "END", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l50:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[35];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "END", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_BEGIN(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "BEGIN"));  if (!yymatchChar(yy, '<')) goto l51;  if (!yy_Spacing(yy)) goto l51;
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[34];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "BEGIN", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l51:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[34];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "BEGIN", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_DOT(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "DOT"));  if (!yymatchChar(yy, '.')) goto l52;  if (!yy_Spacing(yy)) goto l52;
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[33];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "DOT", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l52:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[33];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "DOT", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Class(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Class"));  if (!yymatchChar(yy, '[')) goto l53;  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l53;
#undef yytext
#undef yyleng
  }
  l54:;	
  {  int yypos55= yy->__pos, yythunkpos55= yy->__thunkpos;
  {  int yypos56= yy->__pos, yythunkpos56= yy->__thunkpos;  if (!yymatchChar(yy, ']')) goto l56;  goto l55;
  l56:;	  yy->__pos= yypos56; yy->__thunkpos= yythunkpos56;
  }  if (!yy_Range(yy)) goto l55;  goto l54;
  l55:;	  yy->__pos= yypos55; yy->__thunkpos= yythunkpos55;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l53;
#undef yytext
#undef yyleng
  }  if (!yymatchChar(yy, ']')) goto l53;
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[32];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "Class", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l53:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[32];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "Class", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_IdentStart(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "IdentStart"));  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l57;
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[31];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "IdentStart", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l57:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[31];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "IdentStart", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_LiteralDQ(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "LiteralDQ"));  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l58;  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l58;
#undef yytext
#undef yyleng
  }
  l59:;	
  {  int yypos60= yy->__pos, yythunkpos60= yy->__thunkpos;
  {  int yypos61= yy->__pos, yythunkpos61= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l61;  goto l60;
  l61:;	  yy->__pos= yypos61; yy->__thunkpos= yythunkpos61;
  }  if (!yy_Char(yy)) goto l60;  goto l59;
  l60:;	  yy->__pos= yypos60; yy->__thunkpos= yythunkpos60;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l58;
#undef yytext
#undef yyleng
  }  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l58;
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[30];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "LiteralDQ", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l58:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[30];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "LiteralDQ", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_LiteralSQ(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "LiteralSQ"));  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l62;  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l62;
#undef yytext
#undef yyleng
  }
  l63:;	
  {  int yypos64= yy->__pos, yythunkpos64= yy->__thunkpos;
  {  int yypos65= yy->__pos, yythunkpos65= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l65;  goto l64;
  l65:;	  yy->__pos= yypos65; yy->__thunkpos= yythunkpos65;
  }  if (!yy_Char(yy)) goto l64;  goto l63;
  l64:;	  yy->__pos= yypos64; yy->__thunkpos= yythunkpos64;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l62;
#undef yytext
#undef yyleng
  }  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l62;
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[29];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "LiteralSQ", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l62:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[29];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "LiteralSQ", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_CLOSE(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "CLOSE"));  if (!yymatchChar(yy, ')')) goto l66;  if (!yy_Spacing(yy)) goto l66;
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[28];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "CLOSE", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l66:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[28];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "CLOSE", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_OPEN(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "OPEN"));  if (!yymatchChar(yy, '(')) goto l67;  if (!yy_Spacing(yy)) goto l67;
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[27];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "OPEN", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l67:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[27];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "OPEN", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_COLON(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "COLON"));  if (!yymatchChar(yy, ':')) goto l68;  if (!yy_Spacing(yy)) goto l68;
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[26];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "COLON", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l68:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[26];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "COLON", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_PLUS(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "PLUS"));  if (!yymatchChar(yy, '+')) goto l69;  if (!yy_Spacing(yy)) goto l69;
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[25];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "PLUS", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l69:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[25];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "PLUS", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_STAR(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "STAR"));  if (!yymatchChar(yy, '*')) goto l70;  if (!yy_Spacing(yy)) goto l70;
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[24];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "STAR", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l70:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[24];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "STAR", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_QUESTION(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "QUESTION"));  if (!yymatchChar(yy, '?')) goto l71;  if (!yy_Spacing(yy)) goto l71;
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[23];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "QUESTION", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l71:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[23];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "QUESTION", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Primary(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Primary"));
  {  int yypos73= yy->__pos, yythunkpos73= yy->__thunkpos;  if (!yy_Identifier(yy)) goto l74;  yyDo(yy, yy_1_Primary, yy->__begin, yy->__end);  if (!yy_COLON(yy)) goto l74;  if (!yy_Identifier(yy)) goto l74;
  {  int yypos75= yy->__pos, yythunkpos75= yy->__thunkpos;  if (!yy_LEFTARROW(yy)) goto l75;  goto l74;
  l75:;	  yy->__pos= yypos75; yy->__thunkpos= yythunkpos75;
  }  yyDo(yy, yy_2_Primary, yy->__begin, yy->__end);  goto l73;
  l74:;	  yy->__pos= yypos73; yy->__thunkpos= yythunkpos73;  if (!yy_Identifier(yy)) goto l76;
  {  int yypos77= yy->__pos, yythunkpos77= yy->__thunkpos;  if (!yy_LEFTARROW(yy)) goto l77;  goto l76;
  l77:;	  yy->__pos= yypos77; yy->__thunkpos= yythunkpos77;
  }  yyDo(yy, yy_3_Primary, yy->__begin, yy->__end);  goto l73;
  l76:;	  yy->__pos= yypos73; yy->__thunkpos= yythunkpos73;  if (!yy_OPEN(yy)) goto l78;  if (!yy_Expression(yy)) goto l78;  if (!yy_CLOSE(yy)) goto l80;  goto l79;
  l80:;	  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
  yyerror("missing expected `)`");;
#undef yytext
#undef yyleng
  }  goto l78;
  l79:;	  goto l73;
  l78:;	  yy->__pos= yypos73; yy->__thunkpos= yythunkpos73;
  {  int yypos82= yy->__pos, yythunkpos82= yy->__thunkpos;  if (!yy_LiteralSQ(yy)) goto l83;  yyDo(yy, yy_4_Primary, yy->__begin, yy->__end);  goto l82;
  l83:;	  yy->__pos= yypos82; yy->__thunkpos= yythunkpos82;  if (!yy_LiteralDQ(yy)) goto l81;  yyDo(yy, yy_5_Primary, yy->__begin, yy->__end);
  }
  l82:;	
  {  int yypos84= yy->__pos, yythunkpos84= yy->__thunkpos;  if (!yymatchChar(yy, 'i')) goto l84;
  {  int yypos86= yy->__pos, yythunkpos86= yy->__thunkpos;  if (!yy_IdentStart(yy)) goto l86;  goto l84;
  l86:;	  yy->__pos= yypos86; yy->__thunkpos= yythunkpos86;
  }  yyDo(yy, yy_6_Primary, yy->__begin, yy->__end);  goto l85;
  l84:;	  yy->__pos= yypos84; yy->__thunkpos= yythunkpos84;
  }
  l85:;	  if (!yy_Spacing(yy)) goto l81;  goto l73;
  l81:;	  yy->__pos= yypos73; yy->__thunkpos= yythunkpos73;  if (!yy_Class(yy)) goto l87;  yyDo(yy, yy_7_Primary, yy->__begin, yy->__end);
  {  int yypos88= yy->__pos, yythunkpos88= yy->__thunkpos;  if (!yymatchChar(yy, 'i')) goto l88;
  {  int yypos90= yy->__pos, yythunkpos90= yy->__thunkpos;  if (!yy_IdentStart(yy)) goto l90;  goto l88;
  l90:;	  yy->__pos= yypos90; yy->__thunkpos= yythunkpos90;
  }  yyDo(yy, yy_8_Primary, yy->__begin, yy->__end);  goto l89;
  l88:;	  yy->__pos= yypos88; yy->__thunkpos= yythunkpos88;
  }
  l89:;	  if (!yy_Spacing(yy)) goto l87;  goto l73;
  l87:;	  yy->__pos= yypos73; yy->__thunkpos= yythunkpos73;  if (!yy_DOT(yy)) goto l91;  yyDo(yy, yy_9_Primary, yy->__begin, yy->__end);  goto l73;
  l91:;	  yy->__pos= yypos73; yy->__thunkpos= yythunkpos73;  if (!yy_Action(yy)) goto l92;  yyDo(yy, yy_10_Primary, yy->__begin, yy->__end);  goto l73;
  l92:;	  yy->__pos= yypos73; yy->__thunkpos= yythunkpos73;  if (!yy_BEGIN(yy)) goto l93;  yyDo(yy, yy_11_Primary, yy->__begin, yy->__end);  goto l73;
  l93:;	  yy->__pos= yypos73; yy->__thunkpos= yythunkpos73;  if (!yy_END(yy)) goto l72;  yyDo(yy, yy_12_Primary, yy->__begin, yy->__end);
  }
  l73:;	
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[22];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "Primary", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l72:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[22];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "Primary", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_NOT(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "NOT"));  if (!yymatchChar(yy, '!')) goto l94;  if (!yy_Spacing(yy)) goto l94;
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[21];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "NOT", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l94:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[21];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "NOT", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Suffix(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Suffix"));  if (!yy_Primary(yy)) goto l95;
  {  int yypos96= yy->__pos, yythunkpos96= yy->__thunkpos;
  {  int yypos98= yy->__pos, yythunkpos98= yy->__thunkpos;  if (!yy_QUESTION(yy)) goto l99;  yyDo(yy, yy_1_Suffix, yy->__begin, yy->__end);  goto l98;
  l99:;	  yy->__pos= yypos98; yy->__thunkpos= yythunkpos98;  if (!yy_STAR(yy)) goto l100;  yyDo(yy, yy_2_Suffix, yy->__begin, yy->__end);  goto l98;
  l100:;	  yy->__pos= yypos98; yy->__thunkpos= yythunkpos98;  if (!yy_PLUS(yy)) goto l96;  yyDo(yy, yy_3_Suffix, yy->__begin, yy->__end);
  }
  l98:;	  goto l97;
  l96:;	  yy->__pos= yypos96; yy->__thunkpos= yythunkpos96;
  }
  l97:;	
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[20];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "Suffix", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l95:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[20];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "Suffix", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_AND(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "AND"));  if (!yymatchChar(yy, '&')) goto l101;  if (!yy_Spacing(yy)) goto l101;
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[19];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "AND", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l101:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[19];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "AND", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_AT(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "AT"));  if (!yymatchChar(yy, '@')) goto l102;  if (!yy_Spacing(yy)) goto l102;
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[18];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "AT", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l102:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[18];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "AT", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Action(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Action"));  if (!yymatchChar(yy, '{')) goto l103;  yyDo(yy, yy_1_Action, yy->__begin, yy->__end);  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l103;
#undef yytext
#undef yyleng
  }
  l104:;	
  {  int yypos105= yy->__pos, yythunkpos105= yy->__thunkpos;  if (!yy_Braces(yy)) goto l105;  goto l104;
  l105:;	  yy->__pos= yypos105; yy->__thunkpos= yythunkpos105;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l103;
#undef yytext
#undef yyleng
  }  if (!yymatchChar(yy, '}')) goto l103;  if (!yy_Spacing(yy)) goto l103;
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[17];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "Action", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l103:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[17];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "Action", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_TILDE(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "TILDE"));  if (!yymatchChar(yy, '~')) goto l106;  if (!yy_Spacing(yy)) goto l106;
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[16];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "TILDE", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l106:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[16];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "TILDE", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Prefix(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Prefix"));
  {  int yypos108= yy->__pos, yythunkpos108= yy->__thunkpos;  if (!yy_AT(yy)) goto l109;  if (!yy_Action(yy)) goto l109;  yyDo(yy, yy_1_Prefix, yy->__begin, yy->__end);  goto l108;
  l109:;	  yy->__pos= yypos108; yy->__thunkpos= yythunkpos108;  if (!yy_AND(yy)) goto l110;  if (!yy_Action(yy)) goto l110;  yyDo(yy, yy_2_Prefix, yy->__begin, yy->__end);  goto l108;
  l110:;	  yy->__pos= yypos108; yy->__thunkpos= yythunkpos108;  if (!yy_AND(yy)) goto l111;  if (!yy_Suffix(yy)) goto l111;  yyDo(yy, yy_3_Prefix, yy->__begin, yy->__end);  goto l108;
  l111:;	  yy->__pos= yypos108; yy->__thunkpos= yythunkpos108;  if (!yy_NOT(yy)) goto l112;  if (!yy_Suffix(yy)) goto l112;  yyDo(yy, yy_4_Prefix, yy->__begin, yy->__end);  goto l108;
  l112:;	  yy->__pos= yypos108; yy->__thunkpos= yythunkpos108;  if (!yy_Suffix(yy)) goto l107;
  }
  l108:;	
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[15];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "Prefix", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l107:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[15];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "Prefix", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_error(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "error"));  if (!yy_Prefix(yy)) goto l113;
  {  int yypos114= yy->__pos, yythunkpos114= yy->__thunkpos;  if (!yy_TILDE(yy)) goto l114;  if (!yy_Action(yy)) goto l114;  yyDo(yy, yy_1_error, yy->__begin, yy->__end);  goto l115;
  l114:;	  yy->__pos= yypos114; yy->__thunkpos= yythunkpos114;
  }
  l115:;	
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[14];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "error", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l113:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[14];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "error", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_SLASH(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "SLASH"));  if (!yymatchChar(yy, '/')) goto l116;  if (!yy_Spacing(yy)) goto l116;
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[13];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "SLASH", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l116:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[13];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "SLASH", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Sequence(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Sequence"));  if (!yy_error(yy)) goto l117;
  l118:;	
  {  int yypos119= yy->__pos, yythunkpos119= yy->__thunkpos;  if (!yy_error(yy)) goto l119;  yyDo(yy, yy_1_Sequence, yy->__begin, yy->__end);  goto l118;
  l119:;	  yy->__pos= yypos119; yy->__thunkpos= yythunkpos119;
  }
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[12];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "Sequence", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l117:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[12];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "Sequence", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Expression(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Expression"));  if (!yy_Sequence(yy)) goto l120;
  l121:;	
  {  int yypos122= yy->__pos, yythunkpos122= yy->__thunkpos;  if (!yy_SLASH(yy)) goto l122;  if (!yy_Sequence(yy)) goto l122;  yyDo(yy, yy_1_Expression, yy->__begin, yy->__end);  goto l121;
  l122:;	  yy->__pos= yypos122; yy->__thunkpos= yythunkpos122;
  }
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[11];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "Expression", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l120:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[11];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "Expression", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_LEFTARROW(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "LEFTARROW"));  if (!yymatchString(yy, "<-")) goto l123;  if (!yy_Spacing(yy)) goto l123;
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[10];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "LEFTARROW", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l123:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[10];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "LEFTARROW", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Identifier(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Identifier"));  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l124;
#undef yytext
#undef yyleng
  }  if (!yy_IdentStart(yy)) goto l124;
  l125:;	
  {  int yypos126= yy->__pos, yythunkpos126= yy->__thunkpos;  if (!yy_IdentCont(yy)) goto l126;  goto l125;
  l126:;	  yy->__pos= yypos126; yy->__thunkpos= yythunkpos126;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l124;
#undef yytext
#undef yyleng
  }  if (!yy_Spacing(yy)) goto l124;
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[9];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "Identifier", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l124:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[9];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "Identifier", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_RPERCENT(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "RPERCENT"));  if (!yymatchString(yy, "%}")) goto l127;  if (!yy_Spacing(yy)) goto l127;
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[8];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "RPERCENT", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l127:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[8];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "RPERCENT", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_EndOfLine(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "EndOfLine"));
  {  int yypos129= yy->__pos, yythunkpos129= yy->__thunkpos;  if (!yymatchString(yy, "\r\n")) goto l130;  goto l129;
  l130:;	  yy->__pos= yypos129; yy->__thunkpos= yythunkpos129;  if (!yymatchChar(yy, '\n')) goto l131;  goto l129;
  l131:;	  yy->__pos= yypos129; yy->__thunkpos= yythunkpos129;  if (!yymatchChar(yy, '\r')) goto l128;
  }
  l129:;	  yyDo(yy, yy_1_EndOfLine, yy->__begin, yy->__end);
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[7];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "EndOfLine", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l128:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[7];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "EndOfLine", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_EndOfFile(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "EndOfFile"));
  {  int yypos133= yy->__pos, yythunkpos133= yy->__thunkpos;  if (!yymatchDot(yy)) goto l133;  goto l132;
  l133:;	  yy->__pos= yypos133; yy->__thunkpos= yythunkpos133;
  }
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[6];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "EndOfFile", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l132:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[6];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "EndOfFile", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Trailer(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Trailer"));  if (!yymatchString(yy, "%%")) goto l134;  yyDo(yy, yy_1_Trailer, yy->__begin, yy->__end);  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l134;
#undef yytext
#undef yyleng
  }
  l135:;	
  {  int yypos136= yy->__pos, yythunkpos136= yy->__thunkpos;  if (!yymatchDot(yy)) goto l136;  goto l135;
  l136:;	  yy->__pos= yypos136; yy->__thunkpos= yythunkpos136;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l134;
#undef yytext
#undef yyleng
  }  yyDo(yy, yy_2_Trailer, yy->__begin, yy->__end);
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[5];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "Trailer", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l134:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[5];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "Trailer", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Definition(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Definition"));  if (!yy_Identifier(yy)) goto l137;  yyDo(yy, yy_1_Definition, yy->__begin, yy->__end);  if (!yy_LEFTARROW(yy)) goto l137;  if (!yy_Expression(yy)) goto l137;  yyDo(yy, yy_2_Definition, yy->__begin, yy->__end);
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[4];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "Definition", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l137:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[4];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "Definition", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Declaration(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Declaration"));  if (!yymatchString(yy, "%{")) goto l138;  yyDo(yy, yy_1_Declaration, yy->__begin, yy->__end);  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l138;
#undef yytext
#undef yyleng
  }
  l139:;	
  {  int yypos140= yy->__pos, yythunkpos140= yy->__thunkpos;
  {  int yypos141= yy->__pos, yythunkpos141= yy->__thunkpos;  if (!yymatchString(yy, "%}")) goto l141;  goto l140;
  l141:;	  yy->__pos= yypos141; yy->__thunkpos= yythunkpos141;
  }
  {  int yypos142= yy->__pos, yythunkpos142= yy->__thunkpos;  if (!yy_EndOfLine(yy)) goto l143;  goto l142;
  l143:;	  yy->__pos= yypos142; yy->__thunkpos= yythunkpos142;  if (!yymatchDot(yy)) goto l140;
  }
  l142:;	  goto l139;
  l140:;	  yy->__pos= yypos140; yy->__thunkpos= yythunkpos140;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l138;
#undef yytext
#undef yyleng
  }  if (!yy_RPERCENT(yy)) goto l138;  yyDo(yy, yy_2_Declaration, yy->__begin, yy->__end);
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[3];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "Declaration", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l138:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[3];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "Declaration", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Spacing(yycontext *yy)
{
  yyprintf((stderr, "%s\n", "Spacing"));
  l145:;	
  {  int yypos146= yy->__pos, yythunkpos146= yy->__thunkpos;
  {  int yypos147= yy->__pos, yythunkpos147= yy->__thunkpos;  if (!yy_Space(yy)) goto l148;  goto l147;
  l148:;	  yy->__pos= yypos147; yy->__thunkpos= yythunkpos147;  if (!yy_Comment(yy)) goto l146;
  }
  l147:;	  goto l145;
  l146:;	  yy->__pos= yypos146; yy->__thunkpos= yythunkpos146;
  }
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[2];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "Spacing", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
}
YY_RULE(int) yy_Grammar(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Grammar"));  if (!yy_Spacing(yy)) goto l149;
  {  int yypos152= yy->__pos, yythunkpos152= yy->__thunkpos;  if (!yy_Declaration(yy)) goto l153;  goto l152;
  l153:;	  yy->__pos= yypos152; yy->__thunkpos= yythunkpos152;  if (!yy_Definition(yy)) goto l149;
  }
  l152:;	
  l150:;	
  {  int yypos151= yy->__pos, yythunkpos151= yy->__thunkpos;
  {  int yypos154= yy->__pos, yythunkpos154= yy->__thunkpos;  if (!yy_Declaration(yy)) goto l155;  goto l154;
  l155:;	  yy->__pos= yypos154; yy->__thunkpos= yythunkpos154;  if (!yy_Definition(yy)) goto l151;
  }
  l154:;	  goto l150;
  l151:;	  yy->__pos= yypos151; yy->__thunkpos= yythunkpos151;
  }
  {  int yypos156= yy->__pos, yythunkpos156= yy->__thunkpos;  if (!yy_Trailer(yy)) goto l156;  goto l157;
  l156:;	  yy->__pos= yypos156; yy->__thunkpos= yythunkpos156;
  }
  l157:;	  if (!yy_EndOfFile(yy)) goto l149;
#ifdef YY_RULES_PROFILE
++yy->__rules_succeed_count[1];
#endif
  yyprintf((stderr, "  ok   %s @%d:%d %s\n", "Grammar", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 1;
  l149:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
#ifdef YY_RULES_PROFILE
++yy->__rules_fail_count[1];
#endif
  yyprintf((stderr, "  fail %s @%d:%d %s\n", "Grammar", yy->__lineno, yy->__inputpos-yy->__linenopos, yy->__buf+yy->__pos));
  return 0;
}

#ifndef YY_PART

typedef int (*yyrule)(yycontext *yy);

YY_PARSE(int) YYPARSEFROM(YY_CTX_PARAM_ yyrule yystart)
{
  int yyok;
  if (!yyctx->__buflen)
    {
      yyctx->__buflen= YY_BUFFER_SIZE;
      yyctx->__buf= (char *)YY_MALLOC(yyctx, yyctx->__buflen);
#ifdef YY_DEBUG
      memset(yyctx->__buf, 0, yyctx->__buflen);
#endif
      yyctx->__textlen= YY_BUFFER_SIZE;
      yyctx->__text= (char *)YY_MALLOC(yyctx, yyctx->__textlen);
      yyctx->__thunkslen= YY_STACK_SIZE;
      yyctx->__thunks= (yythunk *)YY_MALLOC(yyctx, sizeof(yythunk) * yyctx->__thunkslen);
      yyctx->__valslen= YY_STACK_SIZE;
      yyctx->__vals= (YYSTYPE *)YY_MALLOC(yyctx, sizeof(YYSTYPE) * yyctx->__valslen);
      yyctx->__begin= yyctx->__end= yyctx->__pos= yyctx->__limit= yyctx->__thunkpos= 0;
    }
  yyctx->__begin= yyctx->__end= yyctx->__pos;
  yyctx->__thunkpos= 0;
  yyctx->__val= yyctx->__vals;
  yyok= yystart(yyctx);
  if (yyok) yyDone(yyctx);
  yyCommit(yyctx);
  return yyok;
}

YY_PARSE(int) YYPARSE(YY_CTX_PARAM)
{
  return YYPARSEFROM(YY_CTX_ARG_ yy_Grammar);
}

YY_PARSE(yycontext *) YYRELEASE(yycontext *yyctx)
{
  if (yyctx->__buflen)
    {
      yyctx->__buflen= 0;
      YY_FREE(yyctx, yyctx->__buf);
      YY_FREE(yyctx, yyctx->__text);
      YY_FREE(yyctx, yyctx->__thunks);
      YY_FREE(yyctx, yyctx->__vals);
    }
  return yyctx;
}
#ifdef YY_RULES_PROFILE

YY_PARSE(int) yyShowRulesProfile(yycontext *yy, FILE *fp)
{
  int itotal_def_count = 0, itotal_def_succ_count = 0, itotal_def_fail_count = 0;
  for(int i=1; i <= YYRULECOUNT; ++i) {
    itotal_def_succ_count += yy->__rules_succeed_count[i];
    itotal_def_fail_count += yy->__rules_fail_count[i];
  }
  itotal_def_count += itotal_def_succ_count + itotal_def_fail_count;
  double dtotal_count = itotal_def_count;
  fprintf(fp, "Total calls %d,  calls per input byte %.2f\n\n", itotal_def_count, (itotal_def_count/(yy->__inputpos*1.0)));
  fprintf(fp, "%4s  %10s  %5s  %10s  %10s  %s\n", "id", "total", "%", "success", "fail", "definition");
  fprintf(fp, "\n%4s  %10.d  %5s  %10.d  %10.d  Total counters", "", itotal_def_count, "", itotal_def_succ_count, itotal_def_fail_count);
  fprintf(fp, "\n%4s  %12s  %5s  %8.2f  %10.2f  %% success/fail\n\n", "", "", "", (itotal_def_succ_count/dtotal_count)*100.0, (itotal_def_fail_count/dtotal_count)*100.0);
  for(int i=1; i <= YYRULECOUNT; ++i) {
    int def_count = yy->__rules_succeed_count[i] + yy->__rules_fail_count[i];
    fprintf(fp, "%4.d  %10.d  %5.2f  %10.d  %10.d  %s\n", i, def_count, (def_count/dtotal_count)*100.0,
	    yy->__rules_succeed_count[i], yy->__rules_fail_count[i], yyrulenames[i]);
  }
  return 0;
}
#endif

#endif
