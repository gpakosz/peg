# ../leg -o leg2naked.leg.c leg2naked.leg; gcc -g -o leg2naked leg2naked.leg.c; ./leg2naked ../src/leg.leg
%{
#include <stdio.h>
#include <stdlib.h>

typedef struct _yycontext yycontext;
void printName(yycontext *ctx, const char *s);
void printDefined(yycontext *ctx, const char *s);
void printElmNSP(yycontext *ctx, const char *s);
void printElm(yycontext *ctx, const char *s);
void printAltSym(yycontext *ctx);
int igetchar(yycontext *ctx);
void synerr(yycontext *ctx, const char *errmsg);

#define getchar() igetchar(yy)
//#define YY_DEBUG
#define YY_CTX_LOCAL

#define YY_CTX_MEMBERS \
	int doOutput; \
	int insideParen; \
	FILE *ifp; \
	const char *ifname;

#define MYRULE_SEP	"="
#define MYRULE_END "\n\t;\n"
#define MYALT_SEP	"|"

%}

grammar =
	_ ( declaration | definition )+ trailer? end_of_file ~{synerr(yy, "unexpected syntax");}
	;
_ =
	( space | comment )*
	;
declaration =
	"%{" ( ! "%}" ( end_of_line | . ) )* RPERCENT
	;
definition =
	identifier EQUAL {printf(" " MYRULE_SEP "\n\t");} expression SEMICOLON? {printf(MYRULE_END);}
	;
trailer =
	"%%" .*
	;
end_of_file =
	! .
	;
end_of_line =
	"\r\n"
	| "\n\r"
	| "\n"
	| "\r"
	;
RPERCENT =
	"%}" _
	;
identifier =
	<[-a-zA-Z_] [-a-zA-Z_0-9]*> _ {printName(yy, yytext);}
	;
EQUAL =
	"=" _
	;
expression =
	sequence ( BAR {printAltSym(yy);} sequence )*
	;
SEMICOLON =
	";" _
	;
sequence =
	error ( error )*
	;
BAR =
	"|" _
	;
error =
	prefix ( TILDE action )?
	;
prefix =
	AT action
	| AND action
	| AND suffix
	| NOT suffix
	| suffix
	;
TILDE =
	"~" _
	;
action =
	"{" braces* "}" _
	;
AT =
	"@" _
	;
AND =
	"&" _
	;
suffix =
	primary ( QUESTION | STAR | PLUS )?
	;
NOT =
	"!" {printf(" !");} _
	;
primary =
	identifier COLON identifier ! EQUAL
	| identifier ! EQUAL
	| OPEN expression CLOSE
	| literal ( "i" {printf("i");} ! [-a-zA-Z_] _ )?
	| class
	| DOT
	| action
	| BEGIN
	| END
	;
QUESTION =
	"?" {printf("?");} _
	;
STAR =
	"*" {printf("*");} _
	;
PLUS =
	"+" {printf("+");} _
	;
COLON =
	":" _
	;
OPEN =
	"("  {printf(" ("); ++yy->insideParen;} _
	;
CLOSE =
	")"  {printf(" )"); --yy->insideParen;} _
	;
literal =
	<['] ( ! ['] char )* [']> {printName(yy, yytext);} _
	| <["] ( ! ["] char )* ["]> {printName(yy, yytext);} _
	| <[`] ( ! [`] char )* [`]> {printName(yy, yytext);} _
	;
class =
	<"[" ( ! "]" range )* "]"> {printName(yy, yytext);} _
	;
DOT =
	"." {printf(".");} _
	;
BEGIN =
	"<" _
	;
END =
	">" _
	;
char =
	"\\" [-abefnrtv'"\[\]\\]
	| "\\" "x" [0-9A-Fa-f] [0-9A-Fa-f]
	| "\\" "x" [0-9A-Fa-f]
	| "\\" [0-3] [0-7] [0-7]
	| "\\" [0-7] [0-7]?
	| ! "\\" .
	;
range =
	char "-" ! ']' char
	| char
	;
braces =
	"{" braces* "}"
	| literalBraces
	| ! "}" ( end_of_line | . )
	;
literalBraces =
	['] ( ! ['] char )* [']
	| ["] ( ! ["] char )* ["]
	;
space =
	" "
	| "\t"
	| end_of_line
	;
comment =
	"#" ( ! end_of_line . )* end_of_line
	;

%%

int igetchar(yycontext *ctx)
{
	return fgetc(ctx->ifp);
}

void printName(yycontext *ctx, const char *s) {
	if(ctx->doOutput) {
		printf(" %s", s);
		/*
		size_t len = strlen(s);
		fputc(' ', stdout);
		for(size_t i=0; i < len; ++i) fputc(s[i] == '-' ? '_' : s[i], stdout);
		fputc(' ', stdout);
		*/
	}
}
void printDefined(yycontext *ctx, const char *s) {
	//printf("===printDefined: %d : %s\n", ctx->doOutput, s);
	#define MYSTRNCMP(ps, ls) (strncmp(ps, ls, sizeof(ls)-1))
	if(ctx->doOutput) {
		if(MYSTRNCMP(s, "nl") == 0) printf(" '\\n' ");
		else if(MYSTRNCMP(s, "cn") == 0) printf(" '\\n' ");
		else if(MYSTRNCMP(s, "cr") == 0) printf(" '\\r' ");
		else if(MYSTRNCMP(s, "s") == 0)
			printf(" (' ' " MYALT_SEP " '\\t' " MYALT_SEP " '\\r' " MYALT_SEP " '\\n') ");
	}
}
void printElmNSP(yycontext *ctx, const char *s) {
	if(ctx->doOutput) printf("%s", s);
}
void printElm(yycontext *ctx, const char *s) {
	if(ctx->doOutput) printf(" %s ", s);
}
void printAltSym(yycontext *ctx) {
	if(ctx->doOutput) {
		printf("%s" MYALT_SEP " ", ctx->insideParen ? " " : "\n\t");
	}
}

void synerr(yycontext *ctx, const char *errmsg)
{
	fprintf(stderr, "%s:%d:%d %s\n", ctx->ifname, ctx->__lineno, ctx->__inputpos-ctx->__linenopos, errmsg);
}

int main(int argc, char *argv[])
{
  int rc;
  /* create a local parser context in automatic storage */
  yycontext yy;
  /* the context *must* be initialised to zero before first use*/
  memset(&yy, 0, sizeof(yy));

  if(argc < 2) {
	printf("usage: %s leg_filename\n", argv[0]);
	return -1;
  }
  yy.ifp = fopen(argv[1], "r");
  if(yy.ifp == NULL) {
     printf("failed to open: %s\n", argv[1]);
     return -2;
  }
  yy.ifname = argv[1];
  yy.__lineno = 1;
  yy.doOutput = 1;
  /*while ( (*/rc = yyparse(&yy); /*) )*/  printf("yy %d\n", rc);

  /* release all resources associated with the context */
  yyrelease(&yy);

  fclose(yy.ifp);
  return 0;
}
